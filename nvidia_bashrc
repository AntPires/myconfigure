export P4CONFIG=.p4config

function r()
{
export TOP=$(pwd)
. build/envsetup.sh
setpaths
choosecombo 1 $1 3
}

function rdebug()
{
export TOP=$(pwd)
. build/envsetup.sh
setpaths
choosecombo 2 $1 3
}


function flashkernel ()
{
sudo $TOP/out/host/linux-x86/bin/nvflash  --download LNX $OUT/boot.img --bl $OUT/bootloader.bin --go
}

function t132flashkernel()
{
sudo $TOP/out/host/linux-x86/bin/nvflash --preboot mts_preboot_si --bootpack mts_si --download LNX $OUT/boot.img --bl $OUT/bootloader.bin --odmdata 0x0098000 --go
}

function t132flashbootloader()
{
sudo $TOP/out/host/linux-x86/bin/nvflash --preboot mts_preboot_si --bootpack mts_si --download EBT bootloader.bin --bl bootloader.bin --go
}

function t132formatdata()
{
sudo $TOP/out/host/linux-x86/bin/nvflash  --format_partition UDA  --bl $OUT/bootloader.bin --preboot mts_preboot_si --bootpack mts_si --go
}

function t132flashmts()
{
sudo $TOP/out/host/linux-x86/bin/nvflash --bl $OUT/bootloader.bin --wait --preboot mts_preboot_si --bootpack mts_si --download MPB mts_preboot_si --download MBP mts_si --go
}


function t132flashall()
{
sudo $TOP/out/host/linux-x86/bin/nvflash --bct bct_pm374_792.cfg --setbct --preboot mts_preboot_si --bootpack mts_si --odmdata 0x0098000 --configfile flash.cfg --create --bl bootloader.bin --go

}

function formatdata()
{
sudo nvflash --format_partition UDA --bl bootloader.bin --go
}

function enterforcerecovery()
{
adb reboot forced-recovery
}

function flashbootloader()

{
sudo $TOP/out/host/linux-x86/bin/nvflash  --download EBT $OUT/bootloader.bin --bl $OUT/bootloader.bin --go
}

function eraseeveryting()
{
sudo ./nvflash --blob blob.bin --format_all --bl bootloader.bin --go
}


function buildk()
{
    if [ -z $1 ]; then
        echo "usage: buildk \${product}"
    else
        make -C `pwd`/kernel ARCH=arm CROSS_COMPILE=`pwd`/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin/arm-eabi- O=`pwd`/out/debug/target/product/roth/obj/KERNEL   zImage
        make -C `pwd`/kernel ARCH=arm CROSS_COMPILE=`pwd`/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin/arm-eabi- O=`pwd`/out/debug/target/product/roth/obj/KERNEL   tegra114-$1.dtb
        out/host/linux-x86/bin/acp -fp `pwd`/out/debug/target/product/$1/obj/KERNEL/arch/arm/boot/zImage out/debug/target/product/$1/kernel
        out/host/linux-x86/bin/mkbootimg  --kernel out/debug/target/product/roth/kernel --ramdisk out/debug/target/product/$1/ramdisk.img  --output out/debug/target/product/$1/boot.img
        echo "bootimage: out/debug/target/product/$1/boot.img"
    fi
}

function capture_gyro_log()
{
        adb shell dmesg -c | tee dmesg_before_test ; adb shell inv_self_test | tee inv_self_test;  adb shell dmesg | tee dmesg_after_test
}

function gosharkapp()
{
	cd vendor/nvidia/tegra/power/powershark/app/;
}

function openusb2()
{
sudo picocom -f -n -p n -b 115200 -i -r -l /dev/ttyUSB2
}



# ----------------------------------------------------------
# ------------ T32 -----------------------------------------

export PATH=${PATH}:/home/jasozhang/t32/home/jasozhang/t32/bin/pc_linux/
export PATH=${PATH}:/home/jasozhang/aa64arm/toolchaine/bin/
export PATH=${PATH}:/home/jasozhang/development/browser-test/tests-browser/env/bin/



# Lauterbach setup
export T32TMP=/tmp
export T32ID=T32
export ADOBE_PATH=/opt/Adobe/Reader9
xset +fp /home/jasozhang/t32/fonts
xset fp rehash
